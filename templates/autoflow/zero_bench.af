%get_goldstandard_PMIDs_and_OMIMIDs){
    . ~soft_bio_267/initializes/init_python
    export PATH=$code_path:$PATH #TODO: Remove later
    ?
    cut -f 1 $omim_file > OMIM_IDS_TO_PREFILTER
    cut -f 2 $omim_file | tr "," "\n" | sort -u > OMIM_PMIDS_TO_FILTER
}

%filter_query){
    ?
    grep -wf get_goldstandard_PMIDs_and_OMIMIDs)/OMIM_IDS_TO_PREFILTER $queries > pre_filtered_queries
	if [[ ! -s pre_filtered_queries ]]; then exit 1; fi
}

%get_and_filter_abstracts){
	resources: -n cal -c 250 -t '1-12:00:00' -m '680gb'
	. ~soft_bio_267/initializes/init_python

	export PATH=$code_path:$PATH #TODO: Remove later
	source $pyenv/bin/activate #TODO: Remove later
	
	ln -s get_goldstandard_PMIDs_and_OMIMIDs)/OMIM_PMIDS_TO_FILTER OMIM_PMIDS_TO_FILTER
	n_cpus=$(([cpu] - 3))
	mkdir indexes
	?
	get_corpus_index -i "$pubmed_path/*" -o indexes -t "pubmed_" -c $n_cpus -d $split_doc -p $doc_type $equivalences \
					 -z $chunksize -k $pubmed_items_per_file -b $text_balance_size --split_output_files
    zcat indexes/*.gz | grep -wf OMIM_PMIDS_TO_FILTER > filtered_corpus_raw
	intersect_columns -a filtered_corpus_raw -b OMIM_PMIDS_TO_FILTER -A 1 -B 1 --k c --full | cut -f 1-7 > filtered_corpus
	
	if [[ $add_random_papers == "yes" ]]; then
		total_files_number=`zcat indexes/*.gz | wc -l`
		gold_files_number=`cat filtered_corpus | wc -l`
		random_files_indexes=`shuf -i 1-$total_files_number -n $gold_files_number | tr "\n" " "`
		zcat indexes/*.gz | awk -v rows="$random_files_indexes" 'BEGIN {split(rows, a); for (i in a) {map[a[i]] = 1}} FNR in map {print $0}' > random_chosen_files
		cat random_chosen_files >> filtered_corpus
	fi
	
	if [[ `zcat filtered_corpus.gz | wc -l` == 0 ]]; then exit 1; fi
	
	zcat filtered_corpus.gz | cut -f 1 > common_pmids
	grep -wf common_pmids $omim_file | cut -f 1 > OMIM_IDS_TO_FILTER
	grep -wf OMIM_IDS_TO_FILTER $queries > filtered_queries
	if [[ ! -s filtered_queries ]]; then exit 1; fi	
	rm indexes/*
}

%query_abstracts){
    resources: -n dgx -c 120 -t '6-00:00:00' -m '600gb' -A $n_gpus
	. ~soft_bio_267/initializes/init_python
	ln -s get_and_filter_abstracts)/OMIM_PMIDS_TO_FILTER OMIM_PMIDS_TO_FILTER
	export PATH=$code_path:$PATH #TODO: Remove later
	source $pyenv/bin/activate #TODO: Remove later
	export MKL_NUM_THREADS=$(([cpu] - 3)) #Pytorch option for CPU
	export OMP_NUM_THREADS=$(([cpu] - 3)) #Pytorch option for CPU

	gpu_csv=`echo $gpu_devices | tr '-' ','`
	echo "using gpu devices: $gpu_csv"

	mkdir semantic_scores
	query_basename=`basename $queries`
    #n_corpus=`zcat get_and_filter_abstracts)"/filtered_corpus.gz" | wc -l | cut -f 1 -d " "`    #previous value to use for -k flag
	?
	stEngine -m $model_name -p $current_model \
             -c get_and_filter_abstracts)/filtered_corpus.gz \
             -q get_and_filter_abstracts)/filtered_queries \
             -k 0 -t "-1" -o semantic_scores \
             -g $gpu_csv $split_doc -v $use_gpu_for_sim_calc \
			 --order "query-corpus"

	if [[ ! -s semantic_scores/filtered_queries ]]; then exit 1; fi #exit if no results
	#awk '{print $2 "\t" $1 "\t" $3 }' semantic_scores/$query_basename > rankings
	
	#TODO: hacer script para agregar el resultado del stengine y escribir a zip. Hacer que el stEngine pueda escribir comprimido
	sed -E 's/_[0-9]+_[0-9]+//g' semantic_scores/filtered_queries | aggregate_column_data -i - -x 1,2 -a 3 -A max > rankings
	#rm -rf semantic_scores/*

	mv rankings rankings_raw
	grep -wf OMIM_PMIDS_TO_FILTER rankings_raw > rankings
}

%rank_diseases[0-209]){
	. ~soft_bio_267/initializes/init_python
	rm all_rankings_rankerlike

	rm ALL_OMIM_IDS_TO_FILTER; ln -s get_and_filter_abstracts)/filtered_queries ALL_OMIM_IDS_TO_FILTER
	ln -s query_abstracts)/rankings rankings

	package_size=20
	current_package_number=(*)
	start_line=`echo "$current_package_number*$package_size+1" | bc`
	subset_table -i ALL_OMIM_IDS_TO_FILTER -s $start_line -l $package_size | cut -f 1 > OMIM_IDS_TO_FILTER


	while read OMIM_ID; do
		echo $OMIM_ID
		grep -w $OMIM_ID rankings > current_rankings
		grep -w $OMIM_ID $omim_file | cut -f 2 | tr "," "\n" > omim_pmids
    	?
		make_zerobench_rankings.py -i current_rankings -o current_rankings_rankerlike -f omim_pmids
		cat current_rankings_rankerlike >> all_rankings_rankerlike
	done < OMIM_IDS_TO_FILTER

	sleep 180
	if [[ ! -s all_rankings_rankerlike ]]; then exit 1; fi #exit if no results
}

%aggregate_results){
	resources: -c 10 -m '300gb'
	. ~soft_bio_267/initializes/init_python
	. ~soft_bio_267/initializes/init_R
	export PATH=/mnt/home/soft/soft_bio_267/programs/x86_64/scripts:$PATH

	rm all_rankings_rankerlike
	?
	cat !rank_diseases!/all_rankings_rankerlike > all_rankings_rankerlike
	awk '{if($7 == 1) print $0}' all_rankings_rankerlike > filtered_rankings

	ROCanalysis.R -i all_rankings_rankerlike -s 2 -t 7 -S stEngine -o "stEngine_ROC" -m "ROC" -M "acc:tpr:fpr:prec:rec" -e #--reverse_score_order

	report_html -d "filtered_rankings,stEngine_ROC_measures" \
				-t $report_templates_path/zerobench.txt \
				-o disease_rankings
	
	if [[ ! -s disease_rankings.html ]]; then exit 1; fi #exit if no results
	cp disease_rankings.html $results_path/reports/disease_rankings.html
}

get_goldstandard_stats){
	rm filtered_rankings
	ln -s aggregate_results)/filtered_rankings filtered_rankings
	n_diseases=`cut -f 6 filtered_rankings | sort -u | wc -l`
	total_pmids=`cat filtered_rankings | wc -l`
	unique_pmids=`cut -f 1 filtered_rankings | sort -u | wc -l`
	unique_pmids_proportion=`echo "scale=2; $unique_pmids/$total_pmids" | bc`
	pmids_per_disease=`echo "scale=2; $total_pmids/$n_diseases" | bc`
	pmids_in_one_disease=`cut -f 1 filtered_rankings | sort | uniq -c | sed -E "s/^[ ]+//g" | tr " " "\t" | awk 'BEGIN{FS=OFS="\t"}{if($1 == 1) print $0}' | wc -l`
	pmids_more_than_one_disease=`cut -f 1 filtered_rankings | sort | uniq -c | sed -E "s/^[ ]+//g" | tr " " "\t" | awk 'BEGIN{FS=OFS="\t"}{if($1 > 1) print $0}' | wc -l`
	mean_repetitions_pmid=`cut -f 1 filtered_rankings | sort | uniq -c | sed -E "s/^[ ]+//g" | tr " " "\t" | awk 'BEGIN{FS=OFS="\t"}{if($1 > 1) print $0}' | cut -f 1 | awk 'BEGIN{acc=0}{acc+=$1}END{print acc/NR}'`
	?
	echo -e "$metareport_tag\t$n_diseases\t$total_pmids\t$unique_pmids\t$unique_pmids_proportion\t$pmids_per_disease\t$pmids_in_one_disease\t$pmids_more_than_one_disease\t$mean_repetitions_pmid" > goldstandard_stats
	cat goldstandard_stats >> $OTHER_STATS_PATH/ddp_gs_stats
}

%prepare_metareport_data){
	tag_formatted=`echo $metareport_tag | tr "." "_"`
	?
	cat aggregate_results)/filtered_rankings | awk -v tag="$metareport_tag" 'BEGIN{OFS="\t"; split(tag,tag_arr,".")}{print $0,tag_arr[1],tag_arr[2]}' > disease_rankings_$tag_formatted
	cp disease_rankings_$tag_formatted $metareport_results_path/../disease_rankings_$tag_formatted
}