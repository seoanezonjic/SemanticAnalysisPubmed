<% 
    import os, math
    import base64
    from collections import Counter
    from io import BytesIO
    from collections import Counter
    from matplotlib import rcParams
    from matplotlib import pyplot as plt
    from matplotlib_venn import venn2
    rcParams['patch.force_edgecolor'] = True

    ###### Custom methods to plot ######
    def embedd_venn(sets_raw, labels, plotter, idd):
        plt.figure(figsize=(10,6))
        sets = Counter()
        sets['01'] = sets_raw[0]
        sets['11'] = sets_raw[2]
        sets['10']  = sets_raw[1]

        ax = plt.gca()
        v = venn2(subsets = sets, set_labels = labels, ax = ax)
        h, l = [],[]
        for i in sets:
            v.get_label_by_id(i).set_text("")
            h.append(v.get_patch_by_id(i))
            l.append(sets[i])
        ax.legend(handles=h, labels=l, title="counts")
        
        plt.show(block=False)
        tmpfile = BytesIO()
        plt.savefig(tmpfile, format='png')
        html = plotter.embed_img(tmpfile, img_attribs=f"id=\'{idd}\' width=50vw height=40vh", bytesIO=True, rezisable=True)
        plt.close('all')
        return html

    ###### Functions to pass to "func" plotter parameter ######
    def process_pie_data(data):
        data[0][0] = "Type"
        data.pop(2)

    def remove_other_stats(data):
        for times in range(5):
            for row in data: row.pop(1)

    def transform_to_percentages(table):
        for idx, row in enumerate(table):
            if idx == 0: continue
            row[2] = math.log10(row[2]+1)
            row[3] = math.log10(row[3]+1)        

    ######### get_pubmed_index part preprocessing 
    top_5_no_abstracts = [[row[1], row[3]] for row in plotter.hash_vars["file_raw_stats"][1:6]]
    top_5_no_abstracts_transposed = list(map(list, zip(*top_5_no_abstracts)))
    plotter.hash_vars["top_5_no_abstracts"] = top_5_no_abstracts_transposed
    plotter.hash_vars["top_5_no_abstracts"][0] = [os.path.basename(file) for file in plotter.hash_vars["top_5_no_abstracts"][0]]

    ######### Sentence Transformers' brought papers stats  preprocessing
    plotter.hash_vars["PMIDs_prevalence"] = [["PREVALENCE"]] + [ [value] for value in list(Counter([row[0] for row in plotter.hash_vars["llm_filtered_scores"]]).values()) ] 
    plotter.hash_vars["HPOs_prevalence"] = [["PREVALENCE"]] + [ [value] for value in list(Counter([row[1] for row in plotter.hash_vars["llm_filtered_scores"]]).values()) ]
    plotter.hash_vars["llm_filtered_scores"].insert(0, ["PMID", "HP", "SIM_SCORE"])
    plotter.hash_vars["similitudes"] = [["SIM_SCORE"]] + [[sim] for row in plotter.hash_vars["llm_filtered_scores"][1:] for sim in row[2].split(";") ] 

    ######## LM_vs_MONDO comparisons preprocessing
    plotter.hash_vars["llm_vs_mondo_semantic_similarity_hpo_based.txt"].insert(
    0, ["PMID", "similarity", "rankings", "strict_pos", "non_strict_pos", "MONDO", "n_newer_better_papers", "n_older_better_papers"])

    for idx,row in enumerate(plotter.hash_vars["llm_vs_mondo_semantic_similarity_hpo_based.txt"]):
        if idx == 0: row.insert(0, "mock_grouping_factor")
        else: row.insert(0, f"factor")

    #Preparing data for MONDO vs PMID number of HPOs scatterplot
    MONDO_nHPOs_cleaned_dict = {key: len(value.split(",")) for key,value in dict(plotter.hash_vars['MONDO_HPOs_cleaned']).items()}
    stEngine_nHPOs_dict = {key: len(value.split(",")) for key,value in dict(plotter.hash_vars['llm_pmID_profiles.txt']).items()}    
    plotter.hash_vars["MONDO_nHPO_vs_PMDID_nHPO"] = [["Index", "MONDO_nHPOs", "PMID_nHPOs", "similarity"]]
    plotter.hash_vars["MONDO_nHPO_vs_PMDID_nHPO"] += [[idx, MONDO_nHPOs_cleaned_dict[row[6]], stEngine_nHPOs_dict[row[1].replace('PMID:', '')], row[2]] 
        for idx, row in enumerate(plotter.hash_vars["llm_vs_mondo_semantic_similarity_hpo_based.txt"][1:])]

    n_records_dict=dict(plotter.hash_vars["number_of_records.txt"])
    n_records_dict={key:int(value) for key,value in n_records_dict.items()}    
%>
<% plotter.set_header() %>




${ plotter.create_title('Pubmed Abstract extraction and preprocessing', id='section1_from', hlevel=1, indexable=True, clickable=True, t_id='section1_to', clickable_text = '(Click me)') }
<%
    section1 =  plotter.pie(id="total_stats", header=True, row_names= True, transpose = True, fields = [0,2,3,4], func=process_pie_data,  
                                title="Pubmed articles stats") + "\n"
    section1 += plotter.density(id="file_proportion_stats", header=True, row_names= True, fields=[0,2], 
                                title="Distribution of proportion of articles without abstract \n among all (original) files downloaded from PubMed") + "\n"
%>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center;">
${ plotter.create_collapsable_container('section1_to', section1) }
</div>




${ plotter.create_title("Sentence Transformers Model's brought paper stats", id='section2_from', hlevel=1, indexable=True, clickable=True, t_id='section2_to', clickable_text = '(Click me)') }
<%
    section2 =  plotter.static_plot_main(id="similitudes", width = 800, height = 800, header=True, row_names= False, fields=[0], rezisable=True,
                                        title="General distribution of semantic scores", x_label = "Semantic Score", y_label = "Number of Abstract-HP term relations",
                                        plotting_function=  lambda data, plotter_list: plotter_list["plt"].hist(data, bins=60) ) + "\n"
    section2 += plotter.static_plot_main(id="PMIDs_prevalence", width = 800, height = 800, header=True, row_names= False, fields=[0], rezisable=True,
                                        title="Prevalence distribution of PMIDs abstracts", y_label = "Number of Articles", x_label = "Number of HPs found inside the article's abstract", 
                                        plotting_function=  lambda data, plotter_list: plotter_list["plt"].hist(data, bins=30, range=(0, 30)) ) + "\n"
    section2 += plotter.static_plot_main(id="HPOs_prevalence", width = 800, height = 800, header=True, row_names= False, fields=[0], rezisable=True,
                                        title="Prevalence distribution of terms of the HPO", y_label = "Number of HPs", x_label = "Number of abstracts found with the HP", 
                                        plotting_function=  lambda data, plotter_list: plotter_list["plt"].hist(data, bins=60, range=(0, 3000))  ) + "\n"
%>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center;">
${ plotter.create_collapsable_container('section2_to', section2) }
</div>





${ plotter.create_title("Model assessment against MONDO gold standard", id='section3_from', hlevel=1, indexable=True, clickable=True, t_id='section3_to', clickable_text = '(Click me)') }
<%
    section3 = embedd_venn(sets_raw = (n_records_dict["mondo_pmid_profiles"], n_records_dict["mondo_hpo_profiles"], n_records_dict["mondos_with_pmid_and_hpo"]), 
                            labels = ('MONDOS with PMID profiles', 'MONDOS with HPO profiles'),
                            plotter = plotter, idd= "venn1") + "\n"

    section3 += embedd_venn(sets_raw = (n_records_dict["llm_pmid_profiles"], n_records_dict["mondos_with_pmid_and_hpo"], n_records_dict["llm_and_mondo_with_pmid_and_hpo"]), 
                            labels = ('PMID-HPO profiles \n brought by model', 'MONDOS with PMID and HPO profiles'),
                            plotter = plotter, idd= "venn2") + "\n"      

    section3 += '<div style="width: 100vw; height: 5vh; background-color: LightGray"></div>' + "\n"    
    #section3 += plotter.barplot(id="number_of_records.txt", translate=True, header=False, row_names=True, title="Other stats", func=remove_other_stats) + "\n"

    section3 += plotter.boxplot( id="llm_vs_mondo_semantic_similarity_hpo_based.txt", x_label="Rankings", fields=[0,3], header=True, row_names=True,
                                title="Model's brought PMIDs vs MONDO rankings from profile comparison (semantic similarity between HPO profiles)" , 
                                config= { "graphOrientation": "vertical"}, 
                                width = 800, height = 800) + "\n"
    
    section3 += plotter.scatter2D(id="MONDO_nHPO_vs_PMDID_nHPO", header=True, row_names=True, title="Number of HP terms in a MONDO ID vs HP terms \n brought by model to the MONDO related PMIDs",
                                colorScaleBy="similarity", xAxis=["MONDO_nHPOs"], yAxis=["PMID_nHPOs"], x_label="Number of MONDO HPs", y_label="Number of HP brought by model to the MONDO-related PMID",
                                add_densities=True, alpha=0.6, config={"objectBorderColor": "white", "dataPointSize": 6},
                                width = 800, height = 800) + "\n"

    section3 += plotter.scatter2D( id="llm_vs_mondo_semantic_similarity_hpo_based.txt", alpha = 0.5,
                                fields=[1,2,7,8], header=True, row_names=True, x_label="Newer papers", y_label="Older papers",
                                xAxis=["n_newer_better_papers"], yAxis=["n_older_better_papers"], colorScaleBy="similarity",
                                title="Number of newer and older papers of the PMIDs \n better than the MONDO gold standard one",
                                width = 800, height = 800) + "\n"
    
    section3 += plotter.scatter2D( id="llm_vs_mondo_semantic_similarity_hpo_based.txt", alpha = 0.5, func=transform_to_percentages,
                                fields=[1,2,7,8], header=True, row_names=True, x_label="log10(Newer papers)", y_label="log10(Older papers)", 
                                xAxis=["n_newer_better_papers"], yAxis=["n_older_better_papers"], colorScaleBy="similarity",
                                title="Number of newer and older papers of the PMIDs \n better than the MONDO gold standard one",
                                width = 800, height = 800) + "\n"

%>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center;">
${ plotter.create_collapsable_container('section3_to', section3) }
</div>