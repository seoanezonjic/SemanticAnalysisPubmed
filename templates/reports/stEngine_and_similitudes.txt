<% 
    from py_exp_calc.exp_calc import flatten
    import os, math, copy
    import numpy as np
    import pandas as pd
    import base64
    from collections import Counter, defaultdict
    from io import BytesIO
    from matplotlib import rcParams
    from matplotlib import pyplot as plt
    from matplotlib_venn import venn2
    rcParams['patch.force_edgecolor'] = True

    ###### Functions to pass to "func" plotter parameter ######
    def remove_other_stats(data):
        for times in range(5):
            for row in data: row.pop(1)

    ###### Custom functions to process data
    def get_profile_mean_depth(hpo_profile):
        hp_terms = hpo_profile.split(",")
        return float(np.mean([int(hpo_terms_depth[term]) for term in hp_terms]))

    ######### get_pubmed_index part preprocessing 
    top_5_no_abstracts = [[row[1], row[3]] for row in plotter.hash_vars["file_raw_stats"][1:6]]
    top_5_no_abstracts_transposed = list(map(list, zip(*top_5_no_abstracts)))
    plotter.hash_vars["top_5_no_abstracts"] = top_5_no_abstracts_transposed
    plotter.hash_vars["top_5_no_abstracts"][0] = [os.path.basename(file) for file in plotter.hash_vars["top_5_no_abstracts"][0]]

    total_stats = plotter.hash_vars["total_stats"]
    total_stats[0].pop(1)
    total_stats[1].pop(1)
    total_stats_zipped = list(zip(*total_stats))
    total_stats_nonzero_zipped = [ pair for pair in total_stats_zipped if pair[1] != "0" ]
    total_stats_nonzero = list(map(list, zip(*total_stats_nonzero_zipped)))
    plotter.hash_vars["total_stats_nonzero"] = total_stats_nonzero

    ######### Sentence Transformers' brought papers stats  preprocessing
    hpo_counts = Counter([row[1] for row in plotter.hash_vars["llm_filtered_scores"]])
    pmid_counts = Counter([row[0] for row in plotter.hash_vars["llm_filtered_scores"]])
    plotter.hash_vars["PMIDs_prevalence"] = [["PREVALENCE"]] + [ [value] for value in list(pmid_counts.values()) ] 
    plotter.hash_vars["HPOs_prevalence"] = [["PREVALENCE"]] + [ [value] for value in list(hpo_counts.values()) ]
    plotter.hash_vars["llm_filtered_scores"].insert(0, ["PMID", "HP", "SIM_SCORE"])
    plotter.hash_vars["similitudes"] = [["SIM_SCORE"]] + [[sim] for row in plotter.hash_vars["llm_filtered_scores"][1:] for sim in row[2].split(";") ] 

    hpo_terms_depth = dict(plotter.hash_vars["HPO_terms_depth"])
    hp_counts_vs_hp_depth = [[hp, counts, hpo_terms_depth[hp]] for hp, counts in hpo_counts.items()]
    plotter.hash_vars["hp_counts_vs_hp_depth"] = [["hp_term", "counts", "term_depth"]] + hp_counts_vs_hp_depth

    pmid_nTerms_and_mean_profile_depth = [[PMID, len(profile), get_profile_mean_depth(profile)] for PMID, profile in plotter.hash_vars["llm_pmID_profiles.txt"]]
    plotter.hash_vars["pmid_nTerms_and_mean_profile_depth"] = [["PMID", "profile_length", "profile_terms_mean_depth"]] + pmid_nTerms_and_mean_profile_depth

%>
<% plotter.set_header() %>


${ plotter.create_title('Pubmed Abstract extraction and preprocessing', id='section1_from', hlevel=1, indexable=True, clickable=True, t_id='section1_to', clickable_text = '(Click me)') }
<% 
    section1 = (plotter.renderize_child_template(plotter.get_internal_template('pubmed_stats.txt')))
%>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center;">
${ plotter.create_collapsable_container('section1_to', section1, display='visible') }
</div>


${ plotter.create_title("Sentence Transformers Model's brought paper stats", id='section2_from', hlevel=1, indexable=True, clickable=True, t_id='section2_to', clickable_text = '(Click me)') }
<% 
    section2 = (plotter.renderize_child_template(plotter.get_internal_template('stengine_stats.txt')))
%>
${ plotter.create_collapsable_container('section2_to', section2, display='visible') }


<% 
    gold = plotter.hash_vars["gold_filename_prefix.txt"][0][0]
    pretty_names={"mondo": "MONDO", "omim": "OMIM-DO", "omim2": "Monogenic OMIM"} 
%>
${ plotter.create_title(f"Gold Standard: {pretty_names[gold]}", id=f'{gold}_from', hlevel=1, indexable=True, clickable=True, t_id=f'{gold}_to', clickable_text = '(Click me)') }
<%  
    section3 = (plotter.renderize_child_template(plotter.get_internal_template('goldstand_stats.txt'), gold=gold, pretty_names=pretty_names, flatten=flatten))
%>
<div class="container" style="width: 100%">
${ plotter.create_collapsable_container(f'{gold}_to', section3, display='visible') }
</div>